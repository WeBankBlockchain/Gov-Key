buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    maven { url "https://oss.sonatype.org/service/local/staging/deploy/maven2"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenLocal()
    mavenCentral()
}
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'com.webank'
version = '1.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

configurations {
    provided
    compile.extendsFrom(provided)
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compile ('org.projectlombok:lombok:1.18.6')
    annotationProcessor ('org.projectlombok:lombok:1.18.6')
    testCompile ('org.projectlombok:lombok:1.18.6')
    testAnnotationProcessor ('org.projectlombok:lombok:1.18.6')

    provided project(":key-core")
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }
}

bootJar {
    destinationDir file('dist')
    archiveName project.name  + '.jar'
    from('src/main/java'){
        include '**/*.xml'
    }
    exclude '**/*.properties'
    exclude '**/*.yml'

    doLast {
        copy {
            from file('tools/')
            into 'dist/'
        }
        copy {
            from file('src/main/tools/')
            into 'dist'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('src/main/resources/application.properties')
            into 'dist/config/'
        }
        copy {
            from file('.').listFiles().findAll{File f -> (f.name.endsWith('.crt') || f.name.endsWith('.keystore'))}
            into 'dist/config'
        }
        copy {
            from file('config/contract/')
            into 'dist/config/contract'
        }
    }
}

jar {
    enabled = true
    destinationDir file('dist')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.yml'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/config'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
    }
}
